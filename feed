<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>iOS "versus" JavaScript: How to Learn From Other Programming Communities</title>
      <link>https://ashfurrow.com/blog/learning-from-other-programming-communities/</link>
      <description>&lt;p&gt;I started writing iOS applications in 2009. By 2012, I had immersed myself deeply enough in the world of iOS development that I had co-authored &lt;a href="https://amzn.to/2UaTPx4"&gt;a book on Objective-C&lt;/a&gt;. I took a great deal of professional pride in crafting delightful user experiences in iOS applications, and thought I would carry on this kind of work for a long time. (You can read the whole story &lt;a href="https://ashfurrow.com/blog/5-years-of-ios/"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;After I started at Artsy in 2014, I began branching out. Way out. I started helping the platform team maintain our Ruby/Node.js/Scala APIs that our iOS apps relied upon. Using JavaScript, I developed UIs for tools that helped Artsy build its business. I grew. Nowadays, I spend my time building &amp;ldquo;&lt;a href="https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"&gt;roads and bridges&lt;/a&gt;&amp;rdquo; to help my colleagues be productive in Artsy&amp;rsquo;s React Native codebase (which is &lt;a href="http://github.com/artsy/emission/"&gt;open source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Let me put it to you this way: at companies with both iOS and web developers, those two groups often don&amp;rsquo;t overlap. Or even interact all that much. They don&amp;rsquo;t share programming languages, they don&amp;rsquo;t share developer tooling, sometimes they are on entirely different teams from one another. They are &lt;em&gt;distinct&lt;/em&gt; teams with &lt;em&gt;distinct&lt;/em&gt; cultures.&lt;/p&gt;

&lt;p&gt;In my work at Artsy, I no longer feel that distinction.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;My point is that my deep experience in both native iOS and JavaScript software development has given me an &lt;a href="https://ashfurrow.com/blog/perspective-of-the-polyglot/"&gt;uncommon perspective&lt;/a&gt; of seeing both communities from the other one&amp;rsquo;s perspective. When I write native iOS, I miss Jest and Prettier &lt;em&gt;so much&lt;/em&gt;. When I write React, I miss Apple&amp;rsquo;s polished profiling tools and their opinionated APIs. I have a foot in both worlds, and I try to share that perspective with other software developers.&lt;/p&gt;

&lt;p&gt;You might think this sounds awful – that I only see the downsides of both platforms. And yeah, that&amp;rsquo;s actually something &lt;a href="https://ashfurrow.com/blog/swift-vs-react-native-feels/"&gt;I&amp;rsquo;ve had to deal with&lt;/a&gt;. But it&amp;rsquo;s not all bad: dual perspectives help me share the best that each world has to offer with the other. It&amp;rsquo;s why Artsy&amp;rsquo;s entire engineering team now has a &lt;a href="https://github.com/artsy/README/issues/117"&gt;healthy, conservative policy&lt;/a&gt; about adopting new dependencies. It&amp;rsquo;s why our web engineers, even if they&amp;rsquo;ve &lt;em&gt;never&lt;/em&gt; done iOS development before, can pitch in on iOS work when we have a tight deadline.&lt;/p&gt;

&lt;p&gt;This &amp;ldquo;we all have so much to learn from each other&amp;rdquo; idea is kind of my whole&amp;hellip; it&amp;rsquo;s my whole thing. Like, if I had to distill the drive of my professional practice into a single sentence, it would be: &amp;ldquo;We all have so much to learn from each other.&amp;rdquo; I care about this &lt;em&gt;a lot&lt;/em&gt;. In 2014, back when Swift was still in beta, my &lt;a href="https://www.youtube.com/watch?v=LtrzZb5Jw0g"&gt;first ever talk on Swift&lt;/a&gt; was a call to action: we Swift developers need to steal the best ideas from other programming language communities. &lt;a href="https://github.com/Moya/Moya"&gt;Moya&lt;/a&gt; was one of those ideas.&lt;/p&gt;

&lt;p&gt;And so when I saw &lt;a href="https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md"&gt;SE-250&lt;/a&gt;, a request from the Swift community to have &lt;del&gt;Apple&lt;/del&gt; Swift develop an &amp;ldquo;official&amp;rdquo; Swift style guide and tooling to enforce it, despite existing &lt;a href="https://github.com/nicklockwood/SwiftFormat"&gt;community&lt;/a&gt; &lt;a href="https://github.com/realm/SwiftLint"&gt;options&lt;/a&gt;, a distinction crystallized in my mind. It kind of hit me, actually. A huge difference between the cultures of the two communities.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;“You know, developing this software would be easier if we had X new tool&amp;hellip;”&lt;br&gt;&lt;br&gt;Ruby/JS Developers: “Yeah, let’s build it!”&lt;br&gt;&lt;br&gt;iOS Developers: “Yeah, let’s ask Apple to build it!”&lt;/p&gt;&amp;mdash; Ash &amp;ldquo;daCareZ0ne&amp;rdquo; Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1108692951348191232?ref_src=twsrc%5Etfw"&gt;March 21, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;I did try to be value-neutral in my wording, though I admit that it&amp;rsquo;s not obvious from what I wrote that I &lt;em&gt;do&lt;/em&gt; see value in both approaches. And this tweet &lt;em&gt;definitely&lt;/em&gt; generalizes both communities – there are folks with these attitudes in both camps. I followed up with this note:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;“This distinction exists“ != “this distinction is bad.” Software development is all about navigating tradeoffs ❤️ Being aware of those tradeoffs has only helped me grow as a professional.&lt;/p&gt;&amp;mdash; Ash &amp;ldquo;daCareZ0ne&amp;rdquo; Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1108705766033276928?ref_src=twsrc%5Etfw"&gt;March 21, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This is really key: pointing out a difference &lt;em&gt;exists&lt;/em&gt; isn&amp;rsquo;t the same thing as asserting &amp;ldquo;this is good&amp;rdquo; or &amp;ldquo;this is bad&amp;rdquo;; it&amp;rsquo;s just &amp;ldquo;this exists.&amp;rdquo; I&amp;rsquo;m endlessly fascinated by these differences and I&amp;rsquo;ve learned that you can only really learn from a difference if you approach it with an open mind and &lt;em&gt;genuine curiosity&lt;/em&gt;. (This skill, of being interested while staying neutral, is something I learned in &lt;a href="https://ashfurrow.com/blog/all-i-can-say-is-im-excited/"&gt;cognitive behavioural therapy&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Thank you to everyone who responded with their own perspectives; for the rest of the week, I had a lot of interesting discussions. I now have more to share about the distinction between JavaScript and native iOS – admittedly, Twitter was never the right medium to explore these nuanced ideas, so I&amp;rsquo;ve written this blog post! Let&amp;rsquo;s dive in.&lt;/p&gt;

&lt;p&gt;My absolute favourite reply came from Reginald Braithwaite, who compared the difference between native iOS and JS to the difference between renting and owning your home:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;ldquo;You know, our residence would be better if we had X&amp;hellip;&amp;rdquo;&lt;br&gt;&lt;br&gt;Homeowners: &amp;ldquo;Yeah, project time, let&amp;rsquo;s hit the home improvement store!&amp;rdquo;&lt;br&gt;&lt;br&gt;Tenants: &amp;ldquo;Yeah, let&amp;rsquo;s ask the landlord to do it!&amp;rdquo;&lt;/p&gt;&amp;mdash; Reginald Braithwaite (@raganwald) &lt;a href="https://twitter.com/raganwald/status/1108738516530298885?ref_src=twsrc%5Etfw"&gt;March 21, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;The reason I love this response is because I think there are benefits to &lt;em&gt;both&lt;/em&gt; renting and owning your home. I &lt;em&gt;like&lt;/em&gt; renting, actually, because it keeps me mobile – I can pick up and move from one city or neighbourhood to wherever I want. It&amp;rsquo;s not for everyone, but it&amp;rsquo;s right for me at this point in my life. (And I couldn&amp;rsquo;t afford to buy a house in Manhattan anyway, so.)&lt;/p&gt;

&lt;p&gt;I approached this response with that same open mind, and I realized that this is &lt;em&gt;the&lt;/em&gt; perfect metaphor for comparing native iOS and JavaScript development. Native developers get a &lt;em&gt;tonne&lt;/em&gt; of awesome advantages to having a single, authoritative platform owner; from that perspective, asking Apple to build a new tool to help iOS developers makes a lot of sense. But just like there are also disadvantages to renting, there are disadvantages to having Apple own your platform.&lt;/p&gt;

&lt;p&gt;Similarly, there are advantages and disadvantages to owning your own home! And just as with home ownership, JavaScript confers its own set of advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Personally, what makes these two distinctions (renting-vs-owning and native-iOS-vs-JavaScript) map so well onto each other is because I believe that &lt;strong&gt;anyone unwilling to acknowledge the advantages &lt;em&gt;and&lt;/em&gt; the disadvantages of &lt;em&gt;both&lt;/em&gt; sides is trying to sell something&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Not to mix metaphors &lt;em&gt;too&lt;/em&gt; much, but I was reminded of &lt;a href="https://youtu.be/6iACK-LNnzM?t=1502"&gt;this Steve Jobs WWDC Fireside Chat (25:02)&lt;/a&gt; from 1997. Jobs also used the metaphor of a building to describe how software gets developed:&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;(With Apple&amp;rsquo;s tools), you can build an app you couldn&amp;rsquo;t build on any (other) platform. And, to me, this is the most exciting. (&amp;hellip;) Because it&amp;rsquo;s all about managing complexity. You&amp;rsquo;re developers, you know that. It&amp;rsquo;s all about managing complexity. It&amp;rsquo;s like scaffolding, right? You erect some scaffolding, and if you keep going up and up and up, and eventually the scaffolding collapses under its own weight. That&amp;rsquo;s what building software is. It&amp;rsquo;s &amp;ldquo;how much scaffolding can you erect before the whole thing collapses under its own weight?&amp;rdquo; (&amp;hellip;) We all know that. It&amp;rsquo;s about managing complexity.&lt;/p&gt;

&lt;p&gt;(Apple&amp;rsquo;s) tools allow you to not have to worry about 90% of the stuff you&amp;rsquo;ve worried about, so you can erect your five stories of scaffolding, but &lt;strong&gt;you&amp;rsquo;re starting on story number twenty three instead of story number six&lt;/strong&gt;. You can get a lot higher. (Emphasis added)&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Jobs is saying that a team can only really build an app that&amp;rsquo;s so complex, but they can start building from a higher starting point to build a building/app that nets out to be higher/better. Those starting stories of the building are Apple&amp;rsquo;s tools and platforms. When I first saw this video a few years ago, so much of Apple&amp;rsquo;s behaviour &amp;ldquo;clicked&amp;rdquo; for me.&lt;/p&gt;

&lt;p&gt;Apple sees &lt;em&gt;themselves&lt;/em&gt; as landlords. Remember: no value judgement (I&amp;rsquo;ve had some bad landlords, too). They see their role as a provider of foundations, upon which software can be built; Apple benefits because better software built on their platform increases the value &lt;em&gt;of&lt;/em&gt; that platform. Developers benefit because they can make better software on those foundations.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s explore this a little bit. Apple is acting like a landlord, okay. As an iOS developer, I pay rent to Apple but I get to benefit from having an awesome home that someone else maintains. So what are the JavaScript developers doing? How does a home-ownership mentality affect how they build software?&lt;/p&gt;

&lt;p&gt;Turns out, it affects it &lt;em&gt;a lot&lt;/em&gt;. JavaScript developers feel a profound sense of &lt;em&gt;ownership&lt;/em&gt; over their tools and frameworks. No company owns the platform, so in a sense, &lt;em&gt;all&lt;/em&gt; JavaScript developers own it. I struggled to describe this ownership concept until Reginald Braithwaite&amp;rsquo;s tweet; I owe him for helping me put words to this feeling.&lt;/p&gt;

&lt;p&gt;When I write native iOS code, I &lt;em&gt;feel&lt;/em&gt; like a renter. When I write JavaScript code, I &lt;em&gt;feel&lt;/em&gt; like a homeowner. With all the benefits and drawbacks of each.&lt;/p&gt;

&lt;p&gt;While Apple might be able to provide a great foundation, &lt;em&gt;I&amp;rsquo;m a roads-and-bridges kind of developer&lt;/em&gt;. I want to be able to improve my own tools, and I often find myself frustrated. Apple might have those twenty three stories to build on top of, but the JavaScript ecosystem is &lt;em&gt;huge&lt;/em&gt; and they&amp;rsquo;re questioning the idea that you can only build so much complexity before it collapses under its own weight. That&amp;rsquo;s great – I love questioning dominant paradigms! But it&amp;rsquo;s also terrifying. Used responsibly, JavaScript can be used to start on a higher floor than native iOS development &lt;em&gt;and&lt;/em&gt; help you erect &lt;em&gt;ten&lt;/em&gt; stories of scaffolding – all on a platform &lt;em&gt;you&lt;/em&gt; own.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important for me to re-iterate that neither one of these is &amp;ldquo;better.&amp;rdquo; They are different languages, with different goals and different constraints. Any comparison between the two is necessarily apples-to-oranges. And while I enjoy getting to use them both, that comes with its own costs. We&amp;rsquo;re all on our own paths, and that&amp;rsquo;s totally okay.&lt;/p&gt;

&lt;p&gt;With all that said, with open hearts and clear minds, I&amp;rsquo;d like to share some of the practical affects of this rather philosophical distinction. What &lt;em&gt;are&lt;/em&gt; the actual advantages/disadvantages to both native iOS and JavaScript? In what&amp;rsquo;s sure to make everyone mad, I&amp;rsquo;ve mocked up a conversation to describe why native iOS and JavaScript development are  both so amazing and both so awful.&lt;/p&gt;

&lt;p&gt;Go ahead and hit &amp;ldquo;Send&amp;rdquo; to get started.&lt;/p&gt;



&lt;div class="chatparent"&gt;
  &lt;div class="responsive-html5-chat"&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This isn&amp;rsquo;t a compressive list, and my opinions are constantly evolving. I try to be aware of my biases and blindspots, and I try not to assume that my experiences apply universally. These observations are obviously based on my experience of moving between iOS and web, which isn&amp;rsquo;t typical.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s important is that when you see a difference between what you know and what someone else knows, you approach that with an open mind. Don&amp;rsquo;t jump to conclusions. Be curious about differences and always look for something you can learn.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;In the beginner&amp;rsquo;s mind there are many possibilities, in the expert&amp;rsquo;s mind there are few. —Shunryu Suzuki, &lt;em&gt;Zen Mind, Beginner&amp;rsquo;s Mind&lt;/em&gt;, 1970&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;If you&amp;rsquo;re an expert in one thing, it&amp;rsquo;s going to feel uncomfortable to branch out and become a beginner again. It was terrifying for me. But if you push through that discomfort, you can gain valuable perspective that will only help you be a better professional.&lt;/p&gt;

&lt;script&gt;
  window.onload = function() {
    var chatScript = [
      {
        message: "The best thing about JavaScript is its ecosystem. It is &lt;em&gt;huge&lt;/em&gt;. And it's vibrant: JavaScript developers feel like they own their own platform, and consequently, there's a lot of experimentation. Most ideas are bad, but the successful ones get institutionalized as best practices. Over time, momentum grows.",
        response: "What do you mean about momentum?"
      },
      {
        message: "Think about this: JavaScript development tools are often written &lt;em&gt;in&lt;/em&gt; JavaScript. As soon as a tool gets built, it's able to be used to build more tools.",
        response: "That sounds kind of dizzying. Is that why the JavaScript ecosystem seems to move so quickly?"
      },
      {
        message: "Aye, that's a big part of it. JavaScript itself and &lt;a href='https://www.npmjs.com'&gt;npm&lt;/a&gt; also encourage the creation of many, single-purpose tools. It is overwhelming. A brand new React Native codebase has &lt;em&gt;hundreds&lt;/em&gt; of dependencies.",
        response: "That sounds pretty sketchy. What about the scaffolding metaphor from earlier? Don't all those packages collapse under their own weight?"
      },
      {
        message: "Sometimes they do 😬 It's happened a few times now, and the JavaScript ecosystem is always developing new tools and practices to deal with the complexity. The community is huge, so there's a lot of impetus to make it all work. Sometimes it feels to me like a \"too big to fail\" kind of situation.",
        response: "That sounds awful."
      },
      {
        message: "You're right to be skeptical. The JavaScript ecosystem can't easily be decoupled from your development flow, either. It's really weird to think about building a Node.js server, for example, without using npm. In iOS, lots of folks still don't use a dependency manager. It's just a different perspective.",
        response: "I hadn't thought about that."
      },
      {
        message: "It's interesting, isn't it? I think of JavaScript as a crucible: hard constraints, like the need for absolute backwards compatibility across decades of browsers, have fostered creativity in the community.",
        response: "Don't things get really fragmented?"
      },
      {
        message: "Yeah, they do. But fragmentation isn't always bad, either. JavaScript allows for specialization in a way that iOS can't: consider two core contributors to &lt;a href='https://babeljs.io'&gt;Babel&lt;/a&gt; and &lt;a href='https://prettier.io'&gt;Prettier&lt;/a&gt; (two important OSS projects). They might never interact at all because the two tools are so different, but they &lt;em&gt;do&lt;/em&gt; both get to use the same tools. JavaScript encourages fragmentation in useful ways, too.",
        response: "But the language just moves so fast!"
      },
      {
        message: "Well, so does Swift.",
        response: "Touché. Are you now going to tell me everything wrong with native iOS development?"
      },
      {
        message: "No, I always like to start on a positive note. Apple's tools for common development workflows are &lt;em&gt;exceptionally&lt;/em&gt; well-polished. For example, Apple's app performance instrumentation tool is the best I've ever seen.",
        response: "Yeah, Instruments.app is great."
      },
      {
        message: "And because Apple owns the platform, they can be opinionated about their tools. Opinionated software can be really good.",
        response: "That's true!"
      },
      {
        message: "Unfortunately, Apple's opinions about developer tooling are often not that good.",
        response: "Wait, what do you mean?"
      },
      {
        message: "Apple's tooling reflects Apple's priorities; they make Instruments.app really amazing because they care that we build performant apps. That's great! But Apple's unit testing tools are... pretty awful to compared to &lt;a href='https://jestjs.io'&gt;Jest&lt;/a&gt;. Apple doesn't prioritize unit testing – that's their opinion, and if you disagree with it, that's not Apple's problem.",
        response: "What's so wrong about Xcode's unit testing tools?"
      },
      {
        message: "I wrote a &lt;a href='https://ashfurrow.com/blog/apple-releases-jive/'&gt;whole blog post about this&lt;/a&gt;, go check it out. It's not a fair comparison, granted: Jest benefits from being used by such a huge community in web front-ends, servers, and command-line tools. XCTest gets used by the relatively small iOS developer community. However, the blog post goes into detail about low-hanging fruit that would make a huge difference. It's got radars you can dupe.",
        response: "How else are the native iOS tools different?"
      },
      {
        message: "Apple builds tools for workflows that already exist, or that Apple invents. Their tools can be difficult to build community tools on top of. Take the new Xcode extensions API: it's very limited. Compare that to Visual Studio Code's extensions API, which is so capable that it has enabled entirely &lt;em&gt;new kinds&lt;/em&gt; of developer tools get built.",
        response: "Yeah, I still miss Alcatraz."
      },
      {
        message: "Me too.",
        response: "Does the size disparity mean that the JavaScript ecosystem will always have better tools?"
      },
      {
        message: "\"Better\" is a value judgement – they are different. JavaScript development tools have to do a lot more than iOS tools, which get to be more focused and have &lt;em&gt;way&lt;/em&gt; lower barriers-to-entry. We're just analyzing those differences. Next, let's think about specialization.",
        response: "Okay..."
      },
      {
        message: "Specialization can be really useful. Many of Apple's APIs are so stable, and cross such a wide spectrum of levels of abstraction, that there are iOS developers who &lt;em&gt;just&lt;/em&gt; focus on the AVFoundation or CoreAnimation frameworks. Specialists can create &lt;em&gt;incredibly&lt;/em&gt; polished software, and that kind of deep specialization is pretty uncommon among JavaScript developers.",
        response: "Whoa, yeah."
      },
      {
        message: "However, specialized skills are difficult to apply to a broad range of tasks.",
        response: "That's bad."
      },
      {
        message: "But they enable very rich, user-centric designs to spring to life and delight users.",
        response: "That's good!"
      },
      {
        message: "But when you have a problem, and Apple doesn't care about &lt;em&gt;that&lt;/em&gt; problem, it really sucks.",
        response: "That's bad."
      },
      {
        message: "Despite this, open source contributors have built some very impressive iOS tools.",
        response: "That's good!"
      },
      {
        message: "But Apple's mishandling of Swift Package Manager has sucked a lot of enthusiasm out of this community.",
        response: "That's bad."
      },
      {
        message: "It is what it is.",
        response: "... can I go now?"
      },
      {
        message: "😉",
        response: "Hey, I just figured out what this bit is a reference too."
      },
      {
        message: "Yeah, I'm a sucker for early Simpsons jokes. &lt;a href='https://youtu.be/Krbl911ZPBA?t=22'&gt;Here's the source material&lt;/a&gt;.",
        response: "We've gotten off-topic."
      },
      {
        message: "Right, sorry.",
        response: "Any other big advantages to native iOS development?"
      },
      {
        message: "Yes. I have to give huge props to Apple for using their authoritative position within the community to make it really easy to learn how to build working software.",
        response: "What kind of tools?"
      },
      {
        message: "In my Core Data workshops, one of the first things we do is create a project with a Core Data Xcode template and examine it. Or take &lt;a href='https://www.apple.com/swift/playgrounds/'&gt;Swift Playgrounds&lt;/a&gt; for example. They make sure it's &lt;em&gt;really&lt;/em&gt; easy to build apps for their platform.",
        response: "It sounds almost... selfish, when you say it like that."
      },
      {
        message: "Life is complicated. I can recognize when Apple has an agenda which happens to align with my own.",
        response: "I guess..."
      },
      {
        message: "Apple's problems aren't our problems. That's a value-neutral statement, so if you have feelings about it, interrogate them. I guarantee you'll learn something.",
        response: "Okay so what else is wrong with native iOS development?"
      },
      {
        message: "It's slow. But this slowness is often only apparent when you've used something better.",
        response: "What do you mean?"
      },
      {
        message: "JavaScript developer tooling is very sophisticated (if unpolished). Hot module reloading and Jest's watch mode enable software development at the speed of thought. iOS development is like a painter who makes a brush stroke and has to wait fifteen seconds to see that change to their painting.",
        response: "That's kind of harsh."
      },
      {
        message: "🤷‍♂️ It's how I feel. It's hard to go back from a world where I see my changes and test results &lt;em&gt;instantly&lt;/em&gt;.",
        response: "Are the tools really that good?"
      },
      {
        message: "Yes. 'Not-invented here syndrome' doesn't hold much purchase among JavaScript developers.",
        response: "You're saying it does with iOS developers?"
      },
      {
        message: "Not nearly like it used to. I've been so happy to see the community nourish a tool-focused open source community that brings Apple's sense of polish to building their own tools. &lt;a href='https://github.com/krzysztofzablocki/Sourcery'&gt;Sourcery&lt;/a&gt;, &lt;a href='https://github.com/realm/jazzy'&gt;Jazzy&lt;/a&gt;, &lt;a href='https://github.com/JohnSundell/Marathon'&gt;Marathon&lt;/a&gt;. I could go on – and don't forget amazing commercial tools like &lt;a href='https://revealapp.com'&gt;Reveal&lt;/a&gt; or &lt;a href='http://injectionforxcode.com'&gt;Inection for Xcode&lt;/a&gt;.",
        response: "It's pretty impressive, what the community has accomplished."
       },
       { message: "I'm proud of it. Let's move on: another reality is that native iOS programming languages can't be used much outside native iOS software development.",
        response: "But what about Swift on the server?"
      },
      {
        message: "I knew this would come up, eventually 😅 Swift on the server is fighting an uphill battle against frameworks with years of momentum behind them. It can be fun to build server apps in Swift, but it's much rougher experience compared to the alternatives. You've got to approach it like an adventure; however, sometimes we don't want an adventure, we just want to be productive. iOS developers sometimes ask me for advice on building their first server, and I steer them away from using Swift. They are more likely to accomplish their goals and avoid getting discouraged and quitting if they learn Sinatra or Express.",
        response: "I guess it all depends, doesn't it?"
      },
      {
        message: "That's right! Software development is all about managing trade-offs. The iOS community is way smaller. That's okay! There are advantages to being smaller, too. Knowing what the trade-offs are will only help us navigate them better.",
        response: "Okay, so what are the disadvantages of JavaScript development? In this comparison to iOS, I mean."
      },
      {
        message: "Yeah, totally. Remember Xcode's awesome project templates? No such thing exists on JavaScript. At all. There is literally no defined starting place 😱 Since there is no platform owner, there is no default &lt;em&gt;anything&lt;/em&gt;. JavaScript's infinite possibilities often lead to analysis-paralysis. It leads to developers blaming themselves when their tools don't work. Constant framework churn leaves the industry littered with codebases whose dependencies are hopelessly outdated. And let's not forget the heavy influence that corporate open source holds over the entire ecosystem.",
        response: "Wait, what?"
      },
      {
        message: "Facebook makes React, React Native, Jest, Yarn, and loads more. Microsoft makes Visual Studio Code and TypeScript. Even the beloved npm is backed by venture capitalists, who are expecting a return on their investments. That's even scarier than bloated node_modules directories, personally. Any of these companies can make a decision motivated by their own agenda and cause major problems for the developer community. In some ways, it's preferable to have Apple as a single platform owner. Let's extend the rent-vs-own metaphor from earlier: JavaScript might be homeowners, but they still pay a mortgage.",
        response: "That sounds awful."
      },
      {
        message: "It is what it is. I do corporate open source for Artsy, which is also venture-backed.",
        response: "Well, Artsy isn't a backbone of the JavaScript ecosystem 😜"
      },
      {
        message: "Ha, that's true. Earlier, I asked you to keep an open mind. That doesn't mean giving up critical thought, though. And I do think about this stuff.",
        response: "I think that's a good place to wrap it up."
      },
      {
        message: "Yeah, hey thanks for the discussion! It felt great to engage with such a curious interlocutor.",
        response: "Well, you're quite eloquent yourself."
      },
      {
        message: "Alright, take care.",
        response: "See ya."
      }
    ];
    // Activating chatbox on element
    responsiveChat(".responsive-html5-chat", chatScript);
    // Start us off on the right foot.
    responsiveChatPush(
      ".chat",
      "ash",
      'Hey, want to chat about native iOS "versus" JavaScript?'
    );
    $(".responsive-html5-chat #input").html(
      "&lt;p&gt;Yeah. What exactly makes JavaScript so awesome?&lt;/p&gt;"
    );
  }
&lt;/script&gt;
</description>
      <pubDate>Mon, 25 Mar 2019 00:01:00 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/learning-from-other-programming-communities/</guid>
    </item>
    <item>
      <title>Senior Engineering and Building a Better World</title>
      <link>https://ashfurrow.com/blog/senior-engineering-and-building-a-better-world/</link>
      <description>&lt;p&gt;I wrote &lt;a href="https://ashfurrow.com/blog/what-is-a-senior-engineer/"&gt;this blog post&lt;/a&gt; in response to &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472"&gt;this tweet&lt;/a&gt; on what it means to be a senior engineer.&lt;/p&gt;

&lt;p&gt;I think I muddled the point of my post somewhat by trying to express two ideas: an ongoing personal search to figure out how to be the best senior engineer &lt;em&gt;I&lt;/em&gt; can be, and a very subtle point about the role of a senior engineer. Let&amp;rsquo;s explore that &lt;strong&gt;latter&lt;/strong&gt; point in a little more depth.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To reiterate, I fully agree with everything in the initial tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A Sr. Engineer’s responsibility isn’t to make puns, work on whatever they want, &amp;amp; fly around the world giving talks.&lt;br&gt;&lt;br&gt;MENTOR others to become better than you.&lt;br&gt;DENOUNCE toxic culture.&lt;br&gt;CRITICIZE decisions that hurt others.&lt;br&gt;&lt;br&gt;Programming is EASY. &lt;br&gt;&lt;br&gt;Being a decent human is still hard.&lt;/p&gt;&amp;mdash; Garen 🥀 Torikian (@gjtorikian) &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472?ref_src=twsrc%5Etfw"&gt;February 1, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to take a moment to build upon what Garen Torikian says here, and what being senior engineer &lt;em&gt;is&lt;/em&gt; – what &amp;ldquo;being a decent human being&amp;rdquo; actually &lt;em&gt;means&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I firmly believe that &amp;ldquo;denouncing toxic culture&amp;rdquo; and &amp;ldquo;criticizing decisions that hurt others&amp;rdquo; are &lt;em&gt;parts&lt;/em&gt; of being a decent human being, and I would group them under the umbrella idea of &amp;ldquo;improving the world.&amp;rdquo; Expanding this idea a little further: if improving the world is what makes you a decent human being, then &lt;em&gt;building a better world&lt;/em&gt; is what makes you a decent senior engineer. And critique alone is insufficient to build a better world.&lt;/p&gt;

&lt;p&gt;That last point is really subtle so I want to be clear: if you only frame your engineering practice in terms of critiquing what already exists, then you are limiting yourself to changing what already exists (instead of building new possibilities).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s think about this in terms of code. If you&amp;rsquo;re working in a poorly-built codebase, then critiquing that codebases is going to be a necessary step to improving it. You should have a list of what&amp;rsquo;s wrong with the codebase before you start to improve it. However, this critique can only tell you what &lt;em&gt;should&lt;/em&gt; be improved; it won&amp;rsquo;t tell you &lt;em&gt;how&lt;/em&gt; to actually improve it. That&amp;rsquo;s going to take imagination and a belief that improving it is even possible. Prepared with your list of problems, your job as a senior engineer is to brainstorm and refine ideas to fix those problems (effectively, coordinating the efforts to fix intersecting problems). That second part is what I felt was missing from Torikian&amp;rsquo;s tweet.&lt;/p&gt;

&lt;p&gt;Part of building a better world is helping people to believe that a better world is even possible. Criticism of an existing bad world is &lt;em&gt;necessary&lt;/em&gt;, but it&amp;rsquo;s not &lt;em&gt;sufficient&lt;/em&gt; to inspire people.&lt;/p&gt;

&lt;p&gt;Balancing both critique (of what is) and movement (towards what could be) is necessary to build others up &lt;em&gt;and&lt;/em&gt; to keep yourself motivated. This is what I meant by &amp;ldquo;critique is so exhausting&amp;rdquo; in the previous post. If all a senior engineer does is focus on what&amp;rsquo;s wrong, they will burn out. And I can&amp;rsquo;t be an effective senior engineer if I burn out.&lt;/p&gt;

&lt;p&gt;Unsurprisingly, I think John K Samson &lt;a href="https://open.spotify.com/track/4REBFPIZGxcFeaPjTz5P24?si=tBQ5gQjWT_qJ3WUB7nOxAA"&gt;puts this best&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I swear I way more than half believe it when I say &lt;br /&gt;
that somewhere love and justice shine. &lt;br /&gt;
Cynicism falls asleep. &lt;br /&gt;
Tyranny talks to itself. &lt;br /&gt;
Sappy slogans all come true. &lt;br /&gt;
We forget to feed our fear. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So yes. Absolutely it is a senior engineer&amp;rsquo;s job to denounce toxicity and criticize cruelty, but it&amp;rsquo;s &lt;em&gt;also&lt;/em&gt; a senior engineer&amp;rsquo;s job to build up an empowering, nourishing culture. It&amp;rsquo;s their job to actually believe that things can get better, and to make that happen.&lt;/p&gt;
</description>
      <pubDate>Sun, 17 Feb 2019 01:00:00 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/senior-engineering-and-building-a-better-world/</guid>
    </item>
    <item>
      <title>What is a Senior Engineer, Even?</title>
      <link>https://ashfurrow.com/blog/what-is-a-senior-engineer/</link>
      <description>&lt;p&gt;Hey, so the other day I retweeted &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472"&gt;this post&lt;/a&gt; about what it means to be a senior engineer:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A Sr. Engineer’s responsibility isn’t to make puns, work on whatever they want, &amp;amp; fly around the world giving talks.&lt;br&gt;&lt;br&gt;MENTOR others to become better than you.&lt;br&gt;DENOUNCE toxic culture.&lt;br&gt;CRITICIZE decisions that hurt others.&lt;br&gt;&lt;br&gt;Programming is EASY. &lt;br&gt;&lt;br&gt;Being a decent human is still hard.&lt;/p&gt;&amp;mdash; Garen 🥀 Torikian (@gjtorikian) &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472?ref_src=twsrc%5Etfw"&gt;February 1, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The tweet does &lt;em&gt;describe&lt;/em&gt; a senior engineer, but it isn&amp;rsquo;t a &lt;em&gt;definition&lt;/em&gt; of what a senior engineer does (as much as it is a cluster of some behaviours that senior engineers should exhibit). It&amp;rsquo;s not that it&amp;rsquo;s &lt;em&gt;wrong&lt;/em&gt;, it&amp;rsquo;s just &lt;em&gt;incomplete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I still agree with it and I stand by it 100% – programming &lt;em&gt;is&lt;/em&gt; the easy part, being a decent human being &lt;em&gt;is&lt;/em&gt; harder. But I also think that it focused too heavily on critique, and critique is not enough.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/what-is-a-senior-engineer/critique.gif" alt="Critique is so limiting and emotionally draining" /&gt;&lt;/p&gt;

&lt;p&gt;Critique is so limiting. It&amp;rsquo;s not enough to &lt;em&gt;just&lt;/em&gt; denounce toxic culture; a senior engineer&amp;rsquo;s job is to &lt;em&gt;create&lt;/em&gt; a nourishing culture instead. It&amp;rsquo;s not enough to &lt;em&gt;just&lt;/em&gt; criticize decisions that hurt others; a senior engineer&amp;rsquo;s job is to be involved in the decision-making process and &lt;em&gt;represent the interests&lt;/em&gt; of the affected people.&lt;/p&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;p&gt;This is just a few examples of what a senior engineer can/should be. As I continue to &lt;a href="https://github.com/artsy/README/blob/973a2b6563e045c69f3568a4c0a256c222cb9ff3/culture/engineering-principles.md#leverage-your-impact"&gt;leverage my impact&lt;/a&gt; as a senior engineer at Artsy, I&amp;rsquo;m exploring what it means to even &lt;em&gt;be&lt;/em&gt; a &amp;ldquo;senior&amp;rdquo; engineer. The tweet was a great reminder for me about the responsibilities of leadership, and it&amp;rsquo;s gotten the wheels of my brain turning to figure out what more I can bring to the role.&lt;/p&gt;
</description>
      <pubDate>Fri, 08 Feb 2019 15:40:36 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/what-is-a-senior-engineer/</guid>
    </item>
    <item>
      <title>First JS Meetup Talk</title>
      <link>https://ashfurrow.com/blog/first-js-meetup-talk/</link>
      <description>&lt;p&gt;Hey! So not a lot of posts over the past six months, what&amp;rsquo;s Ash been up to, eh? Well, besides moving to a new apartment, and &lt;a href="http://artsy.github.io/author/ash/"&gt;blogging for Artsy&lt;/a&gt;, I&amp;rsquo;ve been learning more JavaScript! Specifically, a lot more about JS tooling. &lt;/p&gt;

&lt;p&gt;Last night, I gave &lt;a href="https://www.meetup.com/TypeScriptNYC/events/255170060/"&gt;my first meetup talk&lt;/a&gt; in the JavaScript developer community at &lt;a href="https://www.meetup.com/TypeScriptNYC/"&gt;TypeScript NYC&lt;/a&gt;. It went really well!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I did a live coding demo of how to write custom &lt;a href="https://palantir.github.io/tslint/"&gt;TSLint&lt;/a&gt; rules. TSLint is a tool that checks your &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; code for style problems. You can think of it like &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt;, but for TypeScript. I&amp;rsquo;ve been working on some TSLint rules at Artsy and I thought I would share what I&amp;rsquo;ve learned over the past month or so.&lt;/p&gt;

&lt;p&gt;The talk wasn&amp;rsquo;t recorded, but &lt;a href="https://speakerdeck.com/ashfurrow/building-custom-tslint-rules"&gt;the slides are available&lt;/a&gt; and the &lt;a href="https://github.com/ashfurrow/tsnyc-tslint-rules/blob/master/STEPS.md"&gt;steps I took are documented&lt;/a&gt;. I also have &lt;a href="https://github.com/ashfurrow/tslint-playground"&gt;further reading in this readme&lt;/a&gt;. The meetup audience was very patient and helpful as I worked through the live-coding demo, and were appropriately mind-blown at the end of the talk. I&amp;rsquo;ll definitely come back to this meetup, because the other talks were really interesting, too.&lt;/p&gt;

&lt;p&gt;In 2018, I&amp;rsquo;ve had a blast learning more about module resolution, Babel, the TypeScript compiler, and more. It&amp;rsquo;s a really exciting time for me because I&amp;rsquo;m starting to feel both productive and confident when working in Artsy&amp;rsquo;s various JS-based projects. I&amp;rsquo;ve said this before, but I don&amp;rsquo;t consider myself an &amp;ldquo;iOS developer&amp;rdquo; anymore because the title is too limiting. I solve problems; sometimes that means &lt;a href="https://github.com/artsy/emission/pull/1211"&gt;hunting down crashes in Objective-C&lt;/a&gt; and sometimes that means &lt;a href="https://github.com/Microsoft/TypeScript/pull/28196"&gt;sending the TypeScript compiler a pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited.&lt;/p&gt;
</description>
      <pubDate>Wed, 31 Oct 2018 18:02:12 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/first-js-meetup-talk/</guid>
    </item>
    <item>
      <title>Sad &amp; Sappy Songs</title>
      <link>https://ashfurrow.com/blog/sad-sappy-songs/</link>
      <description>&lt;p&gt;&lt;a href="https://www.artsy.net/artist/mark-rothko"&gt;Mark Rothko&lt;/a&gt;, frustrated with an obtuse interviewer, &lt;a href="https://youtu.be/qFnNgTSkHPM?t=412"&gt;is claimed to have explained&lt;/a&gt; his art by exclaiming: &amp;ldquo;you’ve got sadness in you, I’ve got sadness in me – and my works of art are places where the two sadnesses can meet, and therefore both of us need to feel less sad.&amp;rdquo; As a musician, that really resonates with me. Sometimes, a sad song is exactly what I need to hear (or play) to feel better.&lt;/p&gt;

&lt;p&gt;So I present: &lt;a href="https://www.youtube.com/watch?v=1pIf5VPhmco&amp;amp;list=PLBygl72DbBTHIpDE63lPSvddwHs6FbgRQ"&gt;three sad and sappy songs&lt;/a&gt;, because it&amp;rsquo;s 2018 and we need something else to feel sad about for just a few minutes of relief.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/1pIf5VPhmco' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/gFIWrGecnH0' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/qMpcN0DaX9E' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;(This is my second year playing guitar at Artsy Salon, after &lt;a href="https://ashfurrow.com/blog/guitar-debut/"&gt;debuting on guitar&lt;/a&gt; last year. I&amp;rsquo;m really happy with how far I&amp;rsquo;ve progressed since then – I feel so much more comfortable performing in front of people. &amp;ldquo;&lt;a href="https://www.instagram.com/p/Bka0O3mAtbu/"&gt;Practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/just-play/"&gt;practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/progress-and-pianos/"&gt;practice&lt;/a&gt;&amp;rdquo;, my piano teacher always used to say.)&lt;/p&gt;
</description>
      <pubDate>Fri, 05 Oct 2018 00:30:52 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/sad-sappy-songs/</guid>
    </item>
    <item>
      <title>Snapshot Testing on iOS</title>
      <link>https://ashfurrow.com/blog/snapshot-testing-on-ios/</link>
      <description>&lt;p&gt;&amp;ldquo;Snapshot testing&amp;rdquo; is a phrase that you&amp;rsquo;ll hear in circles of developers who are into unit testing. Conceptually, snapshot testing is a simple idea: take a screenshot of your user interface and store it as a reference image. Then, make unit tests to take screenshots of the same UI and compare it to the reference image. Facebook created, and Uber now maintains, &lt;a href="https://github.com/uber/ios-snapshot-test-case"&gt;ios-snapshot-test-case&lt;/a&gt;, a testing framework that makes this process really easy. Lots of us have written testing tools on top of ios-snapshot-test-case and have been using it in production for a few years now.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s the question that I want to discuss: is it worth it?&lt;/p&gt;

&lt;p&gt;tl;dr yeah it is totally worth it, but (like any technique) you want to be careful about over-doing it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea to write this post came from a friend who shared this trick to display before and after screenshots in GitHub pull requests using Markdown tables.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;🔥 Pull Request Description Tip&lt;br&gt;&lt;br&gt;Using tables is useful for showing before/after screenshots in PRs touching the UI. &lt;a href="https://t.co/lYhfQX30T5"&gt;pic.twitter.com/lYhfQX30T5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1019709696872087557?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;The conversation turned to snapshot testing; a consequence of snapshot testing  would be that you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to include before/after shots in your PR description because they&amp;rsquo;d be included for you in the PR&amp;rsquo;s changed files. Think about it: your reference images are essentially screenshots of your UI – and they&amp;rsquo;re stored in your repository. So when you open a PR that changes the UI, your PR will necessarily include changes to those references images, showing the before and after of the UI changes. Neat!&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;That’s awesome!&lt;br&gt;&lt;br&gt;I was considering a spike to set up some snapshot testing at work too. &lt;br&gt;&lt;br&gt;Would you say it’s worh the time? &lt;br&gt;&lt;br&gt;Does it often reveal defects like that? False positive?&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1020081618239668224?ref_src=twsrc%5Etfw"&gt;July 19, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Is it worth the time? Yes, for our team it was.&lt;/p&gt;

&lt;p&gt;Does it reveal defects? Yes it does – let me give you an example from last week at Artsy.&lt;/p&gt;

&lt;p&gt;We have this button class, &lt;a href="https://github.com/artsy/eigen/blob/052e79a29e6208a099a4972ad0c17158499776b0/Artsy/Views/Styled_Subclasses/Buttons/ARBidButton.m"&gt;&lt;code&gt;ARBidButton&lt;/code&gt;&lt;/a&gt;, which is given an &lt;code&gt;ARAuctionState&lt;/code&gt; and is responsible for updating its background colours, text colours, enabled state, and text. We include this button on artwork views in auctions so the user can bid on them. We wanted to change some of the render logic in the button, but we inadvertently broke another part of our app that we didn&amp;rsquo;t realize was using &lt;code&gt;ARBidButton&lt;/code&gt; too. &lt;a href="https://github.com/artsy/eigen/pull/2659"&gt;Here is the original pull request&lt;/a&gt; and &lt;a href="https://github.com/artsy/eigen/pull/2667"&gt;here is the second attempt&lt;/a&gt; we made (once we realized the button was used elsewhere).&lt;/p&gt;

&lt;p&gt;If we hadn&amp;rsquo;t had snapshot tests for different parts of our UI, we wouldn&amp;rsquo;t have noticed that the small change we wanted to make would have inadvertent changes elsewhere in our app.&lt;/p&gt;

&lt;p&gt;But what about drawbacks? Is snapshot testing worth it? Well, let&amp;rsquo;s back up and get more context.&lt;/p&gt;

&lt;p&gt;Developers who are familiar with different testing strategies eventually form an intuitive understanding of what&amp;rsquo;s formally called the &amp;ldquo;testing pyramid.&amp;rdquo; Here is a depiction of the pyramid that I borrowed from &lt;a href="https://gkedge.gitbooks.io/javascript-acceptance-testing/content/"&gt;this unit testing book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/snapshot-testing-on-ios/pyramid.jpg" alt="Unit testing triangle" /&gt;&lt;/p&gt;

&lt;p&gt;The idea is that some tests are really quick to run (automated unit tests) and others take a really long time to run (manual tests). The testing pyramid models the spectrum between the two: if a test is expensive to run, the pyramid tells you to run fewer of those tests. The pyramid helps developers balance the competing demands of testing (to ensure quality) and shipping quickly (to stay in business).&lt;/p&gt;

&lt;p&gt;Snapshot testing sits right on that barrier between &amp;ldquo;did we build it right?&amp;rdquo; and &amp;ldquo;did we build the right thing?&amp;rdquo; That means that, while snapshot testing is useful, it shouldn&amp;rsquo;t be your &lt;em&gt;entire&lt;/em&gt; testing strategy. You will still need unit tests and manual tests, but snapshot tests really help fill in the gap between the two.&lt;/p&gt;

&lt;p&gt;So, with the testing pyramid in mind, let&amp;rsquo;s return to the question: is it worth it? Well, let&amp;rsquo;s run down some quick pros and cons.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Reference image changes provide an opportunity for designers to give feedback on pull requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Reference images have a large filesize and can change frequently, which can lead to a ballooning git repository size (&lt;a href="https://github.com/artsy/eigen"&gt;our repo&lt;/a&gt; that makes the heaviest use of snapshot testing is 500MB on disk).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: &lt;a href="https://github.com/pointfreeco/swift-snapshot-testing"&gt;Lots&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/Nimble-Snapshots"&gt;of&lt;/a&gt; &lt;a href="https://github.com/dblock/ios-snapshot-test-case-expecta"&gt;tools&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;exist&lt;/a&gt; to make snapshot testing even more useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Tooling for snapshot testing, such as &lt;a href="https://github.com/orta/Snapshots"&gt;this project&lt;/a&gt;, are hampered by Xcode&amp;rsquo;s extremely limited plugin API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot tests are a very broad-strokes confirmation that your UI is &amp;ldquo;correct.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing can only test static UIs and not things like animations or user interaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Testing across devices, iOS versions, and size classes becomes trivial.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing introduces additional complexity to your testing setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: iOS-snapshot-test-case has tools for allowing a specified percentage of differing pixels, along with other customization options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: iOS versions often include changes to text antialiasing, so your tests need to be tied to specific iOS versions. Updating reference images when you update your iOS versions introduces a lot of churn in reference image files, contributing to repo size bloat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot testing encourages you to write testable view controllers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: It&amp;rsquo;s easy to overdo snapshot tests, &lt;em&gt;feel&lt;/em&gt; confident in your app&amp;rsquo;s correctness, but not actually be testing the correct thing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot test failures on CI can&amp;rsquo;t be reviewed, since the image files aren&amp;rsquo;t accessible (it&amp;rsquo;s &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;not difficult to get around this with an S3 bucket&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I have no regrets about our snapshot testing strategy, but others will have different approaches. A lot of the cons that I&amp;rsquo;ve outlined above have workarounds (one could, for example, store reference images in a submodule to mitigate repo bloat). And snapshot testing is really an open field: if you have an idea for a tool, you could probably build it on top of tools that already exist.&lt;/p&gt;

&lt;p&gt;If you decide to try snapshot testing, I can&amp;rsquo;t recommend &lt;a href="https://www.kaleidoscopeapp.com"&gt;Kaleidoscope&lt;/a&gt; enough. Its integration into &lt;code&gt;git difftool&lt;/code&gt; makes reviewing changes to reference images &lt;em&gt;before&lt;/em&gt; opening a PR really easy.&lt;/p&gt;

&lt;p&gt;I hope that gives you a clear picture of what snapshot tests are and how they can be used as a part of a comprehensive testing strategy. It&amp;rsquo;s a cliché, but snapshot tests are not a silver bullet. They will not be a replacement for unit testing. But they can help you write better code, be more confident in your product, and open up whole new ways to collaborate with non-developer colleagues. They&amp;rsquo;re definitely worth learning about – a tool worth having in your toolbox.&lt;/p&gt;
</description>
      <pubDate>Sat, 21 Jul 2018 14:09:45 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/snapshot-testing-on-ios/</guid>
    </item>
  </channel>
</rss>
