<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://ashfurrow.com/feed.rss.xml" rel="self" type="application/rss+xml"/>
    <title>Ash Furrow</title>
    <description>Learning and teaching about interesting topics in iOS Development. Sometimes I diverge to talk about design, photography, or what-have-you.</description>
    <link>https://ashfurrow.com/</link>
    <item>
      <title>Senior Engineering and Building a Better World</title>
      <link>https://ashfurrow.com/blog/senior-engineering-and-building-a-better-world/</link>
      <description>&lt;p&gt;I wrote &lt;a href="https://ashfurrow.com/blog/what-is-a-senior-engineer/"&gt;this blog post&lt;/a&gt; in response to &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472"&gt;this tweet&lt;/a&gt; on what it means to be a senior engineer.&lt;/p&gt;

&lt;p&gt;I think I muddled the point of my post somewhat by trying to express two ideas: an ongoing personal search to figure out how to be the best senior engineer &lt;em&gt;I&lt;/em&gt; can be, and a very subtle point about the role of a senior engineer. Let&amp;rsquo;s explore that &lt;strong&gt;latter&lt;/strong&gt; point in a little more depth.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To reiterate, I fully agree with everything in the initial tweet:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A Sr. Engineer’s responsibility isn’t to make puns, work on whatever they want, &amp;amp; fly around the world giving talks.&lt;br&gt;&lt;br&gt;MENTOR others to become better than you.&lt;br&gt;DENOUNCE toxic culture.&lt;br&gt;CRITICIZE decisions that hurt others.&lt;br&gt;&lt;br&gt;Programming is EASY. &lt;br&gt;&lt;br&gt;Being a decent human is still hard.&lt;/p&gt;&amp;mdash; Garen 🥀 Torikian (@gjtorikian) &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472?ref_src=twsrc%5Etfw"&gt;February 1, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to take a moment to build upon what Garen Torikian says here, and what being senior engineer &lt;em&gt;is&lt;/em&gt; – what &amp;ldquo;being a decent human being&amp;rdquo; actually &lt;em&gt;means&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I firmly believe that &amp;ldquo;denouncing toxic culture&amp;rdquo; and &amp;ldquo;criticizing decisions that hurt others&amp;rdquo; are &lt;em&gt;parts&lt;/em&gt; of being a decent human being, and I would group them under the umbrella idea of &amp;ldquo;improving the world.&amp;rdquo; Expanding this idea a little further: if improving the world is what makes you a decent human being, then &lt;em&gt;building a better world&lt;/em&gt; is what makes you a decent senior engineer. And critique alone is insufficient to build a better world.&lt;/p&gt;

&lt;p&gt;That last point is really subtle so I want to be clear: if you only frame your engineering practice in terms of critiquing what already exists, then you are limiting yourself to changing what already exists (instead of building new possibilities).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s think about this in terms of code. If you&amp;rsquo;re working in a poorly-built codebase, then critiquing that codebases is going to be a necessary step to improving it. You should have a list of what&amp;rsquo;s wrong with the codebase before you start to improve it. However, this critique can only tell you what &lt;em&gt;should&lt;/em&gt; be improved; it won&amp;rsquo;t tell you &lt;em&gt;how&lt;/em&gt; to actually improve it. That&amp;rsquo;s going to take imagination and a belief that improving it is even possible. Prepared with your list of problems, your job as a senior engineer is to brainstorm and refine ideas to fix those problems (effectively, coordinating the efforts to fix intersecting problems). That second part is what I felt was missing from Torikian&amp;rsquo;s tweet.&lt;/p&gt;

&lt;p&gt;Part of building a better world is helping people to believe that a better world is even possible. Criticism of an existing bad world is &lt;em&gt;necessary&lt;/em&gt;, but it&amp;rsquo;s not &lt;em&gt;sufficient&lt;/em&gt; to inspire people.&lt;/p&gt;

&lt;p&gt;Balancing both critique (of what is) and movement (towards what could be) is necessary to build others up &lt;em&gt;and&lt;/em&gt; to keep yourself motivated. This is what I meant by &amp;ldquo;critique is so exhausting&amp;rdquo; in the previous post. If all a senior engineer does is focus on what&amp;rsquo;s wrong, they will burn out. And I can&amp;rsquo;t be an effective senior engineer if I burn out.&lt;/p&gt;

&lt;p&gt;Unsurprisingly, I think John K Samson &lt;a href="https://open.spotify.com/track/4REBFPIZGxcFeaPjTz5P24?si=tBQ5gQjWT_qJ3WUB7nOxAA"&gt;puts this best&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I swear I way more than half believe it when I say &lt;br /&gt;
that somewhere love and justice shine. &lt;br /&gt;
Cynicism falls asleep. &lt;br /&gt;
Tyranny talks to itself. &lt;br /&gt;
Sappy slogans all come true. &lt;br /&gt;
We forget to feed our fear. &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So yes. Absolutely it is a senior engineer&amp;rsquo;s job to denounce toxicity and criticize cruelty, but it&amp;rsquo;s &lt;em&gt;also&lt;/em&gt; a senior engineer&amp;rsquo;s job to build up an empowering, nourishing culture. It&amp;rsquo;s their job to actually believe that things can get better, and to make that happen.&lt;/p&gt;
</description>
      <pubDate>Sun, 17 Feb 2019 01:00:00 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/senior-engineering-and-building-a-better-world/</guid>
    </item>
    <item>
      <title>What is a Senior Engineer, Even?</title>
      <link>https://ashfurrow.com/blog/what-is-a-senior-engineer/</link>
      <description>&lt;p&gt;Hey, so the other day I retweeted &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472"&gt;this post&lt;/a&gt; about what it means to be a senior engineer:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A Sr. Engineer’s responsibility isn’t to make puns, work on whatever they want, &amp;amp; fly around the world giving talks.&lt;br&gt;&lt;br&gt;MENTOR others to become better than you.&lt;br&gt;DENOUNCE toxic culture.&lt;br&gt;CRITICIZE decisions that hurt others.&lt;br&gt;&lt;br&gt;Programming is EASY. &lt;br&gt;&lt;br&gt;Being a decent human is still hard.&lt;/p&gt;&amp;mdash; Garen 🥀 Torikian (@gjtorikian) &lt;a href="https://twitter.com/gjtorikian/status/1091465574998249472?ref_src=twsrc%5Etfw"&gt;February 1, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The tweet does &lt;em&gt;describe&lt;/em&gt; a senior engineer, but it isn&amp;rsquo;t a &lt;em&gt;definition&lt;/em&gt; of what a senior engineer does (as much as it is a cluster of some behaviours that senior engineers should exhibit). It&amp;rsquo;s not that it&amp;rsquo;s &lt;em&gt;wrong&lt;/em&gt;, it&amp;rsquo;s just &lt;em&gt;incomplete&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I still agree with it and I stand by it 100% – programming &lt;em&gt;is&lt;/em&gt; the easy part, being a decent human being &lt;em&gt;is&lt;/em&gt; harder. But I also think that it focused too heavily on critique, and critique is not enough.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/what-is-a-senior-engineer/critique.gif" alt="Critique is so limiting and emotionally draining" /&gt;&lt;/p&gt;

&lt;p&gt;Critique is so limiting. It&amp;rsquo;s not enough to &lt;em&gt;just&lt;/em&gt; denounce toxic culture; a senior engineer&amp;rsquo;s job is to &lt;em&gt;create&lt;/em&gt; a nourishing culture instead. It&amp;rsquo;s not enough to &lt;em&gt;just&lt;/em&gt; criticize decisions that hurt others; a senior engineer&amp;rsquo;s job is to be involved in the decision-making process and &lt;em&gt;represent the interests&lt;/em&gt; of the affected people.&lt;/p&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;p&gt;This is just a few examples of what a senior engineer can/should be. As I continue to &lt;a href="https://github.com/artsy/README/blob/973a2b6563e045c69f3568a4c0a256c222cb9ff3/culture/engineering-principles.md#leverage-your-impact"&gt;leverage my impact&lt;/a&gt; as a senior engineer at Artsy, I&amp;rsquo;m exploring what it means to even &lt;em&gt;be&lt;/em&gt; a &amp;ldquo;senior&amp;rdquo; engineer. The tweet was a great reminder for me about the responsibilities of leadership, and it&amp;rsquo;s gotten the wheels of my brain turning to figure out what more I can bring to the role.&lt;/p&gt;
</description>
      <pubDate>Fri, 08 Feb 2019 15:40:36 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/what-is-a-senior-engineer/</guid>
    </item>
    <item>
      <title>First JS Meetup Talk</title>
      <link>https://ashfurrow.com/blog/first-js-meetup-talk/</link>
      <description>&lt;p&gt;Hey! So not a lot of posts over the past six months, what&amp;rsquo;s Ash been up to, eh? Well, besides moving to a new apartment, and &lt;a href="http://artsy.github.io/author/ash/"&gt;blogging for Artsy&lt;/a&gt;, I&amp;rsquo;ve been learning more JavaScript! Specifically, a lot more about JS tooling. &lt;/p&gt;

&lt;p&gt;Last night, I gave &lt;a href="https://www.meetup.com/TypeScriptNYC/events/255170060/"&gt;my first meetup talk&lt;/a&gt; in the JavaScript developer community at &lt;a href="https://www.meetup.com/TypeScriptNYC/"&gt;TypeScript NYC&lt;/a&gt;. It went really well!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I did a live coding demo of how to write custom &lt;a href="https://palantir.github.io/tslint/"&gt;TSLint&lt;/a&gt; rules. TSLint is a tool that checks your &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; code for style problems. You can think of it like &lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt;, but for TypeScript. I&amp;rsquo;ve been working on some TSLint rules at Artsy and I thought I would share what I&amp;rsquo;ve learned over the past month or so.&lt;/p&gt;

&lt;p&gt;The talk wasn&amp;rsquo;t recorded, but &lt;a href="https://speakerdeck.com/ashfurrow/building-custom-tslint-rules"&gt;the slides are available&lt;/a&gt; and the &lt;a href="https://github.com/ashfurrow/tsnyc-tslint-rules/blob/master/STEPS.md"&gt;steps I took are documented&lt;/a&gt;. I also have &lt;a href="https://github.com/ashfurrow/tslint-playground"&gt;further reading in this readme&lt;/a&gt;. The meetup audience was very patient and helpful as I worked through the live-coding demo, and were appropriately mind-blown at the end of the talk. I&amp;rsquo;ll definitely come back to this meetup, because the other talks were really interesting, too.&lt;/p&gt;

&lt;p&gt;In 2018, I&amp;rsquo;ve had a blast learning more about module resolution, Babel, the TypeScript compiler, and more. It&amp;rsquo;s a really exciting time for me because I&amp;rsquo;m starting to feel both productive and confident when working in Artsy&amp;rsquo;s various JS-based projects. I&amp;rsquo;ve said this before, but I don&amp;rsquo;t consider myself an &amp;ldquo;iOS developer&amp;rdquo; anymore because the title is too limiting. I solve problems; sometimes that means &lt;a href="https://github.com/artsy/emission/pull/1211"&gt;hunting down crashes in Objective-C&lt;/a&gt; and sometimes that means &lt;a href="https://github.com/Microsoft/TypeScript/pull/28196"&gt;sending the TypeScript compiler a pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited.&lt;/p&gt;
</description>
      <pubDate>Wed, 31 Oct 2018 18:02:12 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/first-js-meetup-talk/</guid>
    </item>
    <item>
      <title>Sad &amp; Sappy Songs</title>
      <link>https://ashfurrow.com/blog/sad-sappy-songs/</link>
      <description>&lt;p&gt;&lt;a href="https://www.artsy.net/artist/mark-rothko"&gt;Mark Rothko&lt;/a&gt;, frustrated with an obtuse interviewer, &lt;a href="https://youtu.be/qFnNgTSkHPM?t=412"&gt;is claimed to have explained&lt;/a&gt; his art by exclaiming: &amp;ldquo;you’ve got sadness in you, I’ve got sadness in me – and my works of art are places where the two sadnesses can meet, and therefore both of us need to feel less sad.&amp;rdquo; As a musician, that really resonates with me. Sometimes, a sad song is exactly what I need to hear (or play) to feel better.&lt;/p&gt;

&lt;p&gt;So I present: &lt;a href="https://www.youtube.com/watch?v=1pIf5VPhmco&amp;amp;list=PLBygl72DbBTHIpDE63lPSvddwHs6FbgRQ"&gt;three sad and sappy songs&lt;/a&gt;, because it&amp;rsquo;s 2018 and we need something else to feel sad about for just a few minutes of relief.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;



&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/1pIf5VPhmco' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/gFIWrGecnH0' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;div class='embed-responsive embed-responsive-16by9'&gt;&lt;iframe src='//www.youtube.com/embed/qMpcN0DaX9E' frameborder='0' allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;



&lt;p&gt;(This is my second year playing guitar at Artsy Salon, after &lt;a href="https://ashfurrow.com/blog/guitar-debut/"&gt;debuting on guitar&lt;/a&gt; last year. I&amp;rsquo;m really happy with how far I&amp;rsquo;ve progressed since then – I feel so much more comfortable performing in front of people. &amp;ldquo;&lt;a href="https://www.instagram.com/p/Bka0O3mAtbu/"&gt;Practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/just-play/"&gt;practice&lt;/a&gt;, &lt;a href="https://ashfurrow.com/blog/progress-and-pianos/"&gt;practice&lt;/a&gt;&amp;rdquo;, my piano teacher always used to say.)&lt;/p&gt;
</description>
      <pubDate>Fri, 05 Oct 2018 00:30:52 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/sad-sappy-songs/</guid>
    </item>
    <item>
      <title>Snapshot Testing on iOS</title>
      <link>https://ashfurrow.com/blog/snapshot-testing-on-ios/</link>
      <description>&lt;p&gt;&amp;ldquo;Snapshot testing&amp;rdquo; is a phrase that you&amp;rsquo;ll hear in circles of developers who are into unit testing. Conceptually, snapshot testing is a simple idea: take a screenshot of your user interface and store it as a reference image. Then, make unit tests to take screenshots of the same UI and compare it to the reference image. Facebook created, and Uber now maintains, &lt;a href="https://github.com/uber/ios-snapshot-test-case"&gt;ios-snapshot-test-case&lt;/a&gt;, a testing framework that makes this process really easy. Lots of us have written testing tools on top of ios-snapshot-test-case and have been using it in production for a few years now.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s the question that I want to discuss: is it worth it?&lt;/p&gt;

&lt;p&gt;tl;dr yeah it is totally worth it, but (like any technique) you want to be careful about over-doing it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The idea to write this post came from a friend who shared this trick to display before and after screenshots in GitHub pull requests using Markdown tables.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;🔥 Pull Request Description Tip&lt;br&gt;&lt;br&gt;Using tables is useful for showing before/after screenshots in PRs touching the UI. &lt;a href="https://t.co/lYhfQX30T5"&gt;pic.twitter.com/lYhfQX30T5&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1019709696872087557?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;The conversation turned to snapshot testing; a consequence of snapshot testing  would be that you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to include before/after shots in your PR description because they&amp;rsquo;d be included for you in the PR&amp;rsquo;s changed files. Think about it: your reference images are essentially screenshots of your UI – and they&amp;rsquo;re stored in your repository. So when you open a PR that changes the UI, your PR will necessarily include changes to those references images, showing the before and after of the UI changes. Neat!&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;That’s awesome!&lt;br&gt;&lt;br&gt;I was considering a spike to set up some snapshot testing at work too. &lt;br&gt;&lt;br&gt;Would you say it’s worh the time? &lt;br&gt;&lt;br&gt;Does it often reveal defects like that? False positive?&lt;/p&gt;&amp;mdash; Gio 💻🔧📚 (@mokagio) &lt;a href="https://twitter.com/mokagio/status/1020081618239668224?ref_src=twsrc%5Etfw"&gt;July 19, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Is it worth the time? Yes, for our team it was.&lt;/p&gt;

&lt;p&gt;Does it reveal defects? Yes it does – let me give you an example from last week at Artsy.&lt;/p&gt;

&lt;p&gt;We have this button class, &lt;a href="https://github.com/artsy/eigen/blob/052e79a29e6208a099a4972ad0c17158499776b0/Artsy/Views/Styled_Subclasses/Buttons/ARBidButton.m"&gt;&lt;code&gt;ARBidButton&lt;/code&gt;&lt;/a&gt;, which is given an &lt;code&gt;ARAuctionState&lt;/code&gt; and is responsible for updating its background colours, text colours, enabled state, and text. We include this button on artwork views in auctions so the user can bid on them. We wanted to change some of the render logic in the button, but we inadvertently broke another part of our app that we didn&amp;rsquo;t realize was using &lt;code&gt;ARBidButton&lt;/code&gt; too. &lt;a href="https://github.com/artsy/eigen/pull/2659"&gt;Here is the original pull request&lt;/a&gt; and &lt;a href="https://github.com/artsy/eigen/pull/2667"&gt;here is the second attempt&lt;/a&gt; we made (once we realized the button was used elsewhere).&lt;/p&gt;

&lt;p&gt;If we hadn&amp;rsquo;t had snapshot tests for different parts of our UI, we wouldn&amp;rsquo;t have noticed that the small change we wanted to make would have inadvertent changes elsewhere in our app.&lt;/p&gt;

&lt;p&gt;But what about drawbacks? Is snapshot testing worth it? Well, let&amp;rsquo;s back up and get more context.&lt;/p&gt;

&lt;p&gt;Developers who are familiar with different testing strategies eventually form an intuitive understanding of what&amp;rsquo;s formally called the &amp;ldquo;testing pyramid.&amp;rdquo; Here is a depiction of the pyramid that I borrowed from &lt;a href="https://gkedge.gitbooks.io/javascript-acceptance-testing/content/"&gt;this unit testing book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ashfurrow.com/img/blog/snapshot-testing-on-ios/pyramid.jpg" alt="Unit testing triangle" /&gt;&lt;/p&gt;

&lt;p&gt;The idea is that some tests are really quick to run (automated unit tests) and others take a really long time to run (manual tests). The testing pyramid models the spectrum between the two: if a test is expensive to run, the pyramid tells you to run fewer of those tests. The pyramid helps developers balance the competing demands of testing (to ensure quality) and shipping quickly (to stay in business).&lt;/p&gt;

&lt;p&gt;Snapshot testing sits right on that barrier between &amp;ldquo;did we build it right?&amp;rdquo; and &amp;ldquo;did we build the right thing?&amp;rdquo; That means that, while snapshot testing is useful, it shouldn&amp;rsquo;t be your &lt;em&gt;entire&lt;/em&gt; testing strategy. You will still need unit tests and manual tests, but snapshot tests really help fill in the gap between the two.&lt;/p&gt;

&lt;p&gt;So, with the testing pyramid in mind, let&amp;rsquo;s return to the question: is it worth it? Well, let&amp;rsquo;s run down some quick pros and cons.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Reference image changes provide an opportunity for designers to give feedback on pull requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Reference images have a large filesize and can change frequently, which can lead to a ballooning git repository size (&lt;a href="https://github.com/artsy/eigen"&gt;our repo&lt;/a&gt; that makes the heaviest use of snapshot testing is 500MB on disk).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: &lt;a href="https://github.com/pointfreeco/swift-snapshot-testing"&gt;Lots&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/Nimble-Snapshots"&gt;of&lt;/a&gt; &lt;a href="https://github.com/dblock/ios-snapshot-test-case-expecta"&gt;tools&lt;/a&gt; &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;exist&lt;/a&gt; to make snapshot testing even more useful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Tooling for snapshot testing, such as &lt;a href="https://github.com/orta/Snapshots"&gt;this project&lt;/a&gt;, are hampered by Xcode&amp;rsquo;s extremely limited plugin API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot tests are a very broad-strokes confirmation that your UI is &amp;ldquo;correct.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing can only test static UIs and not things like animations or user interaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Testing across devices, iOS versions, and size classes becomes trivial.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot testing introduces additional complexity to your testing setup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: iOS-snapshot-test-case has tools for allowing a specified percentage of differing pixels, along with other customization options.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: iOS versions often include changes to text antialiasing, so your tests need to be tied to specific iOS versions. Updating reference images when you update your iOS versions introduces a lot of churn in reference image files, contributing to repo size bloat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pro&lt;/strong&gt;: Snapshot testing encourages you to write testable view controllers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: It&amp;rsquo;s easy to overdo snapshot tests, &lt;em&gt;feel&lt;/em&gt; confident in your app&amp;rsquo;s correctness, but not actually be testing the correct thing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Con&lt;/strong&gt;: Snapshot test failures on CI can&amp;rsquo;t be reviewed, since the image files aren&amp;rsquo;t accessible (it&amp;rsquo;s &lt;a href="https://github.com/ashfurrow/second_curtain"&gt;not difficult to get around this with an S3 bucket&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I have no regrets about our snapshot testing strategy, but others will have different approaches. A lot of the cons that I&amp;rsquo;ve outlined above have workarounds (one could, for example, store reference images in a submodule to mitigate repo bloat). And snapshot testing is really an open field: if you have an idea for a tool, you could probably build it on top of tools that already exist.&lt;/p&gt;

&lt;p&gt;If you decide to try snapshot testing, I can&amp;rsquo;t recommend &lt;a href="https://www.kaleidoscopeapp.com"&gt;Kaleidoscope&lt;/a&gt; enough. Its integration into &lt;code&gt;git difftool&lt;/code&gt; makes reviewing changes to reference images &lt;em&gt;before&lt;/em&gt; opening a PR really easy.&lt;/p&gt;

&lt;p&gt;I hope that gives you a clear picture of what snapshot tests are and how they can be used as a part of a comprehensive testing strategy. It&amp;rsquo;s a cliché, but snapshot tests are not a silver bullet. They will not be a replacement for unit testing. But they can help you write better code, be more confident in your product, and open up whole new ways to collaborate with non-developer colleagues. They&amp;rsquo;re definitely worth learning about – a tool worth having in your toolbox.&lt;/p&gt;
</description>
      <pubDate>Sat, 21 Jul 2018 14:09:45 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/snapshot-testing-on-ios/</guid>
    </item>
    <item>
      <title>Thinking Critically About Apple</title>
      <link>https://ashfurrow.com/blog/thinking-critically-about-apple/</link>
      <description>&lt;p&gt;Yesterday I tweeted a complaint I had about Apple&amp;rsquo;s iOS SDK. My complaint highlighted one instance of a larger trend in Apple&amp;rsquo;s behaviour towards their SDK design and documentation; I&amp;rsquo;m far more interested in the trend than I am in any given SDK issue.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Apple&amp;rsquo;s stubborn refusal to provide a simple API to determine if you&amp;rsquo;re on an iPhone X causes developers to check for hardcoded screen dimensions, which is worse than developers making device-specific layouts. Don&amp;rsquo;t @ me.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1019631126585978881?ref_src=twsrc%5Etfw"&gt;July 18, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Despite my request to not be replied to, people did. They really seemed to want to discuss the specifics of this issue. But, to repeat myself: I don&amp;rsquo;t care about this specific complaint, I care about the larger trend.&lt;/p&gt;

&lt;p&gt;So what is that trend? Well it&amp;rsquo;s complicated and it involves critical thinking; if you&amp;rsquo;ve never thought critically about Apple before, this might seem like a really weird thing to complain about, but here&amp;rsquo;s my issue:&lt;/p&gt;

&lt;p&gt;Apple designs its SDK based on how Apple wants the community to build software. However, sometimes the way Apple wants you to build things and the way you want to build things is going to differ.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I really wish &amp;ldquo;you should think critically about Apple&amp;rdquo; weren&amp;rsquo;t such a hot take in the iOS developer community, but here we are.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004406015956221953?ref_src=twsrc%5Etfw"&gt;June 6, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;This attitude Apple has (&amp;ldquo;you can either build how they want you to build, or get out&amp;rdquo;) obviously has advantages and disadvantages. I&amp;rsquo;m not saying it&amp;rsquo;s absolutely bad, I&amp;rsquo;m saying that &lt;em&gt;I&lt;/em&gt; am often frustrated by it. My complaints on twitter are not meant to deride Apple, but rather to draw the community&amp;rsquo;s attention to how Apple&amp;rsquo;s motivations and their own motivations are not the same. (This fact seems obvious to me but I often get pushback from community developers, which boggles my mind.)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Thinking critically about Apple would involve asking questions about their decisions. Let’s take how they deprecated OpenGL for example. Who does this benefit? Who does it harm? What are the implications? Those sorts of questions need to get asked.&lt;/p&gt;&amp;mdash; Ash Furrow (@ashfurrow) &lt;a href="https://twitter.com/ashfurrow/status/1004708649896435712?ref_src=twsrc%5Etfw"&gt;June 7, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;Sometimes, when trying to define a problem with how you work, it&amp;rsquo;s helpful to step outside your experience and get a different perspective. Let&amp;rsquo;s contrast how Apple treats its SDK design with another platform: React.&lt;/p&gt;

&lt;p&gt;Whereas Apple&amp;rsquo;s philosophy could be characterized as &amp;ldquo;this is how to build software for our platform, take it or leave it&amp;rdquo;, React could described with &amp;ldquo;this is how to build software for our platform, but sometimes you might need to escape our abstractions, and here&amp;rsquo;s how to do that.&amp;rdquo; You might think I&amp;rsquo;m being hyperbolic, but let&amp;rsquo;s look at the docs for &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;imperatively accessing DOM elements outside of React&amp;rsquo;s lifecycle&lt;/a&gt;. The technical details don&amp;rsquo;t matter here – just pay attention to their tone:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In rare cases, you might want to have access to a child’s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s a huge shift from Apple&amp;rsquo;s approach to, for example, the iPhone X API that I tweeted about yesterday. React&amp;rsquo;s docs caution you against overusing this escape hatch from their SDK, but they also explain in detail how to do it.&lt;/p&gt;

&lt;p&gt;Maybe it&amp;rsquo;s just me, but this difference is really striking. It exemplifies the distinction that I&amp;rsquo;m trying to highlight.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying Apple needs to change or that you need to change your mind or anything. Not everything I say is meant to be persuasive. All I&amp;rsquo;m saying is: Apple is its own company with its own motivations. Do not forget that, and do not conflate what&amp;rsquo;s good for you with what&amp;rsquo;s good for Apple.&lt;/p&gt;
</description>
      <pubDate>Thu, 19 Jul 2018 14:15:03 +0000</pubDate>
      <guid>https://ashfurrow.com/blog/thinking-critically-about-apple/</guid>
    </item>
  </channel>
</rss>
